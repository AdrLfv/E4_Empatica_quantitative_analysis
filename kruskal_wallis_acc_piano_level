library(signal)
library(pracma)
library(dplyr)
library(FSA)
library(ggsignif)

source("standardize_ACC.R")

base_path <- "D:/MIT project/2024_06 E4 Data/Cleaned data"
stream_folders <- list.dirs(base_path, recursive = FALSE)
participant_path <- "D:/MIT project/2024_06 E4 Data/participants.csv"
participant_data <- read.table(participant_path, header = TRUE, sep = ";", stringsAsFactors = FALSE)
# Ordre des sessions
sessions_order <- c("A", "B", "C", "D")

# Pour stocker la data normalisée on crée un dictionnaire
normalised_data <- data.frame()

# Parcourir le dossier des participants
for (participant_folder in stream_folders) {
  participant_id <- substr(basename(participant_folder), 1, 3)
  participant_info <- participant_data %>% filter(ID == participant_id)
  if (nrow(participant_info) == 0) next
  isPianist <- substr(participant_info$isPianist, 1, 1)

  for (i in 1:4) {
    session_data <- normalise_ACC(participant_folder)
    if (!is.null(session_data)) {
      session_data <- session_data %>% mutate(
          Participant = participant_id,
          Group = isPianist,
          Session = sessions_order[i]
      )
      normalised_data <- bind_rows(normalised_data, session_data)
    }
  }
}

# Enregistrement de la data normalisée
# write.csv(normalised_data, "D:/MIT project/2024_06 E4 Data/normalised_ACC.csv", row.names = FALSE)

make_kruskal_test <- function(entry_data) {
  data <- entry_data
  # Analyse par session
  # for (session in sessions_order) {
    # data <- data_copy %>% filter(Session == session)
    # print(paste("Session:", session))
    
    # Convertir ACC en numérique si nécessaire
    if (is.matrix(data$ACC) || is.array(data$ACC)) {
      print("Conversion de ACC en vecteur numérique")
      data$ACC <- as.numeric(data$ACC)
    } else if (!is.numeric(data$ACC)) {
      print("Conversion de ACC en numérique")
      data$ACC <- as.numeric(data$ACC)
    }

    if (!is.factor(data$Group)) {
      print("Conversion de Group en facteur")
      data$Group <- as.factor(data$Group)
    }

    # if (!is.factor(data$Session)) {
    #   print("Conversion de Session en facteur")
    #   data$Session <- as.factor(data$Session)
    # }
    
    # Effectuer le test de Kruskal-Wallis
    kruskal_test <- kruskal.test(ACC ~ Group, data = data)
    print(kruskal_test)
    
    # Effectuer le test de Dunn
    dunn_test <- dunnTest(ACC ~ Group, data = data, method = "bonferroni")
    print(dunn_test)
    
    # Effectuer le test de Wilcoxon par paires
    pairwise_test <- pairwise.wilcox.test(data$ACC, data$Group, p.adjust.method = "bonferroni")
    print(pairwise_test)
  # }
}

get_stats <- function(data) {
  for (session in sessions_order) {
    data_copy <- data
    data_copy <- data_copy %>% filter(Session == session)
    print(paste("Session:", session))
    
    # Calculer les moyennes
    means <- data_copy %>% group_by(Group) %>% summarise(mean = mean(ACC))
    print(means)
    
    # Calculer les écarts-types
    sds <- data_copy %>% group_by(Group) %>% summarise(sd = sd(ACC))
    print(sds)
    
    # Calculer les médianes
    medians <- data_copy %>% group_by(Group) %>% summarise(median = median(ACC))
    print(medians)
  }
  # Global stats
  print("Global stats")
  # Calculer les moyennes
  means <- data %>% group_by(Group) %>% summarise(mean = mean(ACC))
  print(means)

  # Calculer les écarts-types
  sds <- data %>% group_by(Group) %>% summarise(sd = sd(ACC))
  print(sds)

  # Calculer les médianes
  medians <- data %>% group_by(Group) %>% summarise(median = median(ACC))
  print(medians)
}

# Exécuter les fonctions de test
make_kruskal_test(normalised_data)
get_stats(normalised_data)
